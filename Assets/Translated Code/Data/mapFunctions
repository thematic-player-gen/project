function drawTileset14(tileset,tileType) {
	for (var i = 0; i < array_length(tileset); ++i) {
		for (var n = 0; n < array_length(tileset[i]); ++n) {
			if (tileset[i][n].tile == tileType) {
				var sprData = checkSurroundingsTile14(checkSurroundings(i,n,tileset,tileset[i][n].tile));
				draw_sprite_ext(tileset[i][n].tile,sprData[0],coorToTile(n),coorToTile(i),(sprData[2]*-2)+1,1,sprData[1]*90,c_white,1);
			}
		}
	}
}

function drawTileset16(tileset,tileType) {
	for (var i = 0; i < array_length(tileset); ++i) {
		for (var n = 0; n < array_length(tileset[i]); ++n) {
			if (tileset[i][n].tile == tileType) {
				var sprData = checkSurroundingsTile16(checkSurroundings(i,n,tileset,tileset[i][n].tile));
				draw_sprite_ext(tileset[i][n].tile,sprData,coorToTile(n),coorToTile(i),1,1,0,c_white,1);
			}
		}
	}
}
function drawTileset22(tileset,tileType,spr = noone) {
	for (var i = 0; i < array_length(tileset); ++i) {
		for (var n = 0; n < array_length(tileset[i]); ++n) {
			if (tileset[i][n].tile == tileType) {
				var sprData = checkSurroundingsTile22(checkSurroundings(i,n,tileset,tileset[i][n].tile));
				draw_sprite_ext(spr == noone ? tileType : spr,sprData,coorToTile(n),coorToTile(i),1,1,0,c_white,1);
			}
		}
	}
}


function drawTilesetBound(tileset,tileType) {
	for (var i = 0; i < array_length(tileset); ++i) {
		for (var n = 0; n < array_length(tileset[i]); ++n) {
			if (tileset[i][n].tile == tileType) {
				var sprData = checkSurroundingsTile22(checkSurroundingsBound(i,n,tileset,tileset[i][n].tile));
				draw_sprite_ext(tileset[i][n].tile,sprData,coorToTile(n)-TILE_START,coorToTile(i)-TILE_START,1,1,0,c_white,1);
			}
		}
	}
}

function drawObjects(tileset,tileType,ind = 0) {
	for (var i = 0; i < array_length(tileset); ++i) {
		for (var n = 0; n < array_length(tileset[i]); ++n) {
			if (tileset[i][n].tile == tileType) {
				draw_sprite_ext(tileType,ind,coorToTile(n),coorToTile(i),1,1,0,c_white,1);
			}
		}
	}
}

function drawObjectList() {
	//Sort object data by location into array
	var tileset = oData.objectData;
	if (ds_list_size(tileset) > 0) {
		for (var i = 0; i < ds_list_size(tileset); ++i) tileArray[i] = ds_list_find_value(tileset,i);
		array_sort(tileArray,function(elm1, elm2){
			return elm1.location[1] - elm2.location[1];
		});
	
		//Draw objects
		for (var i = 0; i < array_length(tileArray); ++i) {
			var data = tileArray[i];
			draw_sprite_ext(data.spr,data.index,coorToTile(data.location[0]),coorToTile(data.location[1]),1,1,0,c_white,1);
		}
		//Reset array
		array_delete(tileArray,0,array_length(tileArray));
	}
}

function checkSurroundings(pointY,pointX,array,spr) {
	var tL = false;
	var tM = false;
	var tR = false;
	var cL = false;
	var cR = false;
	var bL = false;
	var bM = false;
	var bR = false;
	
	var upCheck = false;
	var downCheck = false;
	var leftCheck = false;
	var rightCheck = false;
	
	if (pointY > 0) upCheck = true; 
	else if (spr == sCliff) {
		tM = true;
		tL = true;
		tR = true;
	}
	if (pointY < array_length(array)-1) downCheck = true;
	else if (spr == sCliff) {
		bM = true;
		bL = true;
		bR = true;
	}
	if (pointX > 0) leftCheck = true;
	else if (spr == sCliff) {
		cL = true;
		tL = true;
		bL = true;
	}
	if (pointX < array_length(array[0])-1) rightCheck = true;
	else if (spr == sCliff) {
		cR = true;
		bR = true;
		tR = true;
	}
	
	if (upCheck) {
		if ((leftCheck) && (array[pointY-1,pointX-1].tile == spr)) tL = true;
		if ((rightCheck) && (array[pointY-1,pointX+1].tile == spr)) tR = true;
		if (array[pointY-1,pointX].tile == spr) tM = true;
	}
	if (downCheck) {
		if ((leftCheck) && (array[pointY+1,pointX-1].tile == spr)) bL = true;
		if ((rightCheck) && (array[pointY+1,pointX+1].tile == spr)) bR = true;
		if (array[pointY+1,pointX].tile == spr) bM = true;
	}
	if ((leftCheck) && (array[pointY,pointX-1].tile == spr)) cL = true;
	if ((rightCheck) && (array[pointY,pointX+1].tile == spr)) cR = true;
	
	return [tL,tM,tR,cL,cR,bL,bM,bR];
}
function checkSurroundingsBound(pointY,pointX,array,spr) {
	var tL = false;
	var tM = false;
	var tR = false;
	var cL = false;
	var cR = false;
	var bL = false;
	var bM = false;
	var bR = false;
	
	var upCheck = false;
	var downCheck = false;
	var leftCheck = false;
	var rightCheck = false;
	
	if (pointY > 0) upCheck = true; 
	else if (spr == sCliff) {
		tM = true;
		tL = true;
		tR = true;
	}
	if (pointY < array_length(array)-1) downCheck = true;
	else if (spr == sCliff) {
		bM = true;
		bL = true;
		bR = true;
	}
	if (pointX > 0) leftCheck = true;
	else if (spr == sCliff) {
		cL = true;
		tL = true;
		bL = true;
	}
	if (pointX < array_length(array[0])-1) rightCheck = true;
	else if (spr == sCliff) {
		cR = true;
		bR = true;
		tR = true;
	}
	
	if (upCheck) {
		if ((leftCheck) && (array[pointY-1,pointX-1].tile == spr)) tL = true;
		if ((rightCheck) && (array[pointY-1,pointX+1].tile == spr)) tR = true;
		if (array[pointY-1,pointX].tile == spr) tM = true;
	}
	if (downCheck) {
		if ((leftCheck) && (array[pointY+1,pointX-1].tile == spr)) bL = true;
		if ((rightCheck) && (array[pointY+1,pointX+1].tile == spr)) bR = true;
		if (array[pointY+1,pointX].tile == spr) bM = true;
	}
	if ((leftCheck) && (array[pointY,pointX-1].tile == spr)) cL = true;
	if ((rightCheck) && (array[pointY,pointX+1].tile == spr)) cR = true;
	
	//Check other array
	upCheck = false;
	downCheck = false;
	leftCheck = false;
	rightCheck = false;
	if ((pointY == 2) && (pointX > 1) && (pointX < 65)) downCheck = true;
	if ((pointY == 35) && (pointX > 1) && (pointX < 65)) upCheck = true;
	if ((pointX == 2) && (pointY > 1) && (pointY < 36)) rightCheck = true;
	if ((pointX == 64) && (pointY > 1) && (pointY < 36)) leftCheck = true;
	array = oData.groundArray;
	if (upCheck) {
		if ((pointX > 3) && (array[pointY-4,pointX-4].tile == spr)) tL = true;
		if ((pointX < 63) && (array[pointY-4,pointX-2].tile == spr)) tR = true;
		if (rightCheck) {
			tM = true;
			if (array[pointY-4,pointX-2].tile == spr) tR = true;
			cR = true;
		} else if (leftCheck) {
			tM = true;
			if (array[pointY-4,pointX-4].tile == spr) tL = true;
			cL = true;
		} else if (array[pointY-4,pointX-3].tile == spr) tM = true;
	}
	if (downCheck) {
		if ((pointX > 3) && (array[pointY-2,pointX-4].tile == spr)) bL = true;
		if ((pointX < 63) && (array[pointY-2,pointX-2].tile == spr)) bR = true;
		if (rightCheck) {
			bM = true;
			if (array[pointY-2,pointX-2].tile == spr) bR = true;
			cR = true;
		} else if (leftCheck) {
			bM = true;
			if (array[pointY-2,pointX-4].tile == spr) bL = true;
			cL = true;
		} else if (array[pointY-2,pointX-3].tile == spr) bM = true;
	}
	if (leftCheck) {
		if ((pointY > 3) && (array[pointY-4,pointX-4].tile == spr)) tL = true;
		if ((pointY < 34) && (array[pointY-2,pointX-4].tile == spr)) bL = true;
		if (((!upCheck) && (!downCheck)) && (array[pointY-3,pointX-4].tile == spr)) cL = true;
	}
	if (rightCheck) {
		if ((pointY > 3) && (array[pointY-4,pointX-2].tile == spr)) tR = true;
		if ((pointY < 34) && (array[pointY-2,pointX-2].tile == spr)) bR = true;
		if (((!upCheck) && (!downCheck)) && (array[pointY-3,pointX-2].tile == spr)) cR = true;
	}
	
	
	return [tL,tM,tR,cL,cR,bL,bM,bR];
}

function checkSurroundingsTile14(surroundArray) {
	var topLeft = surroundArray[0];
	var topMiddle = surroundArray[1];
	var topRight = surroundArray[2];
	var centreLeft = surroundArray[3];
	var centreRight = surroundArray[4];
	var bottomLeft = surroundArray[5];
	var bottomMiddle = surroundArray[6];
	var bottomRight = surroundArray[7];
	
	
	var count = 0;
	var tile = [0,0,0];
	
	if (topMiddle) count += 1;
	if (centreLeft) count += 2;
	if (centreRight) count += 4;
	if (bottomMiddle) count += 8;
	
	switch (count) {
		case 1: tile = [1,0,0]; break;
		case 2: tile = [1,1,0]; break;
		case 3: if (topLeft) tile = [6,1,0]; else tile = [2,1,0]; break;
		case 4: tile = [1,3,0]; break;
		case 5: if (topRight) tile = [6,0,0]; else tile = [2,0,0]; break;
		case 6: tile = [3,0,0]; break;
		case 7: {
			if (topRight) {
				if (topLeft) tile = [7,0,0]; else tile = [8,0,0];
			} else if (topLeft) tile = [8,0,1]; else tile = [4,0,0];
			break;
		}
		case 8: tile = [1,2,0]; break;
		case 9: tile = [3,3,0]; break;
		case 10: if (bottomLeft) tile = [6,2,0]; else tile = [2,2,0]; break;
		case 11: {
			if (topLeft) {
				if (bottomLeft) tile = [7,1,0]; else tile = [8,1,0];
			} else if (bottomLeft) tile = [8,1,1]; else tile = [4,1,0];
			break;
		}
		case 12: if (bottomRight) tile = [6,3,0]; else tile = [2,3,0]; break;
		case 13: {
			if (topRight) {
				if (bottomRight) tile = [7,3,0]; else tile = [8,3,1];
			} else if (bottomRight) tile = [8,3,0]; else tile = [4,3,0];
			break;
		}
		case 14: {
			if (bottomLeft) {
				if (bottomRight) tile = [7,2,0]; else tile = [8,2,0];
			} else if (bottomRight) tile = [8,2,1]; else tile = [4,2,0];
			break;
		}
		case 15: {
			if (topLeft) {
				if (topRight) {
					if (bottomLeft) {
						if (bottomRight) tile = [13,0,0]; else tile = [12,3,0];
					} else if (bottomRight) tile = [12,2,0]; else tile = [10,2,0];
				} else {
					if (bottomLeft) {
						if (bottomRight) tile = [12,0,0]; else tile = [10,3,0];
					} else if (bottomRight) tile = [11,0,0]; else tile = [9,1,0];
				}
			} else {
				if (topRight) {
					if (bottomLeft) {
						if (bottomRight) tile = [12,1,0]; else tile = [11,1,0];
					} else if (bottomRight) tile = [10,1,0]; else tile = [9,0,0];
				} else {
					if (bottomLeft) {
						if (bottomRight) tile = [10,0,0]; else tile = [9,2,0];
					} else if (bottomRight) tile = [9,3,0]; else tile = [5,0,0];
				}
			}
			break;
		}
	}
	return tile;
}
function checkSurroundingsTile16(surroundArray) {
	var topMiddle = surroundArray[1];
	var centreLeft = surroundArray[3];
	var centreRight = surroundArray[4];
	var bottomMiddle = surroundArray[6];
	
	
	var count = 0;
	var tile = 12;
	
	if (topMiddle) count += 1;
	if (centreLeft) count += 2;
	if (centreRight) count += 4;
	if (bottomMiddle) count += 8;
	
	switch (count) {
		case 1: tile = 8; break;
		case 2: tile = 15; break;
		case 3: tile = 11; break;
		case 4: tile = 13; break;
		case 5: tile = 9; break;
		case 6: tile = 14; break;
		case 7: tile = 10; break;
		case 8: tile = 0; break;
		case 9: tile = 4; break;
		case 10: tile = 3; break;
		case 11: tile = 7; break;
		case 12: tile = 1; break;
		case 13: tile = 5; break;
		case 14: tile = 2; break;
		case 15: tile = 6; break;
	}
	return tile;
}
	
function checkSurroundingsTile22(surroundArray) {
	var topLeft = surroundArray[0];
	var topMiddle = surroundArray[1];
	var topRight = surroundArray[2];
	var centreLeft = surroundArray[3];
	var centreRight = surroundArray[4];
	var bottomLeft = surroundArray[5];
	var bottomMiddle = surroundArray[6];
	var bottomRight = surroundArray[7];
	
	var tile = 18;
	var count = 0;
	
	if (topMiddle) count += 1;
	if (centreLeft) count += 2;
	if (centreRight) count += 4;
	if (bottomMiddle) count += 8;
	
	switch (count) {
		case 1: tile = 12; break;
		case 2: tile = 21; break;
		case 3: if (topLeft) tile = 15; else tile = 8; break;
		case 4: tile = 19; break;
		case 5: if (topRight) tile = 13; else tile = 8; break;
		case 6: tile = 20; break;
		case 7: {
			if (topRight) {
				if (topLeft) tile = 14; else tile = 8;
			} else if (topLeft) tile = 8; else tile = 8;
			break;
		}
		case 8: tile = 0; break;
		case 9: tile = 6; break;
		case 10: if (bottomLeft) tile = 3; else tile = 8; break;
		case 11: {
			if (topLeft) {
				if (bottomLeft) tile = 9; else tile = 8;
			} else if (bottomLeft) tile = 8; else tile = 8;
			break;
		}
		case 12: if (bottomRight) tile = 1; else tile = 8; break;
		case 13: {
			if (topRight) {
				if (bottomRight) tile = 7; else tile = 8;
			} else if (bottomRight) tile = 8; else tile = 8;
			break;
		}
		case 14: {
			if (bottomLeft) {
				if (bottomRight) tile = 2; else tile = 8;
			} else if (bottomRight) tile = 8; else tile = 8;
			break;
		}
		case 15: {
			if (topLeft) {
				if (topRight) {
					if (bottomLeft) {
						if (bottomRight) tile = 8; else tile = 4;
					} else if (bottomRight) tile = 5; else tile = 8;
				} else {
					if (bottomLeft) {
						if (bottomRight) tile = 10; else tile = 8;
					} else if (bottomRight) tile = 17; else tile = 8;
				}
			} else {
				if (topRight) {
					if (bottomLeft) {
						if (bottomRight) tile = 11; else tile = 16;
					} else if (bottomRight) tile = 8; else tile = 8;
				} else {
					if (bottomLeft) {
						if (bottomRight) tile = 8; else tile = 8;
					} else if (bottomRight) tile = 8; else tile = 8;
				}
			}
			break;
		}
	}
	return tile;
}