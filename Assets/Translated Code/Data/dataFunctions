function addTile(tileset,coors,spr) {
	tileset[coors[1],coors[0]] = {
		tile : spr
	}
}

function addObject(obj,coors,ind = 0) {
	ds_list_add(oData.objectData,{
		spr : obj,
		index : ind,
		coor : coors,
		location : coors[0]
	});
	for (var i = 0; i < array_length(coors); ++i) {
	    oData.objectArray[coors[i][1],coors[i][0]] = {
			tile : obj,
			link : coors[0]
		}
	}
}

function changeObjectIndex(coors,ind) {
	var c = oData.objectArray[coors[1],coors[0]].link;
	for (var i = 0; i < ds_list_size(oData.objectData); ++i) {
		var cCheck = ds_list_find_value(oData.objectData,i);
		if (c == cCheck.location) {
			ds_list_replace(oData.objectData,i,{
				spr : oData.objectData.spr,
				index : ind,
				coor : oData.objectData.coor,
				location : oData.objectData.location
			});
			break;
		}
	}
}

function checkTileFree(tileset,coors) {
	if (tileset[coors[1],coors[0]].tile == noone) return true; else return false;
}

function checkTileFree4(tileset,coors,spr = noone) {
	if ((coors[1] < 31) && (coors[0] < 60)) {
		if (((tileset[coors[1],coors[0]].tile == noone) || (tileset[coors[1],coors[0]].tile == spr)) &&
			((tileset[coors[1]+1,coors[0]+1].tile == noone) || (tileset[coors[1]+1,coors[0]+1].tile == spr)) &&
			((tileset[coors[1]+1,coors[0]].tile == noone) || (tileset[coors[1]+1,coors[0]].tile == spr)) &&
			((tileset[coors[1],coors[0]+1].tile == noone) || (tileset[coors[1],coors[0]+1].tile == spr))) return true; else return false;
	}
}

function removeTile(tileset,coors,skip = false) {
	var t = tileset[coors[1],coors[0]].tile;
	if ((!skip) && ((t == sTree1) || (t == sTree2))) removeObject(coors);
	else tileset[coors[1],coors[0]] = {
		tile : noone
	}
}

function removeObject(coors) {
	var c = oData.objectArray[coors[1],coors[0]].link;
	for (var i = 0; i < ds_list_size(oData.objectData); ++i) {
		var cCheck = ds_list_find_value(oData.objectData,i);
		if (c == cCheck.location) {
			for (var n = 0; n < array_length(cCheck.coor); ++n) {
				removeTile(oData.objectArray,cCheck.coor[n],true);
			}
			ds_list_delete(oData.objectData,i);
			break;
		}
	}
}

function checkTilePlaceableWater(tileset,coors) {
	if ((coors[0] > 0) && (coors[0] < 60) && (coors[1] > 0) && (coors[1] < 31)) {
		for (var i = -1; i < 2; ++i) {
		    for (var n = -1; n < 2; ++n) {
				if (tileset[coors[1]+i,coors[0]+n].tile != sWater) return false;
			}
		}
	} else return false;
	return true;
}

function checkTilePlaceableGround(tileset,coors,dirt = true) {
	if (tileset[coors[1],coors[0]].tile == noone) return true;
	else if ((dirt) && (tileset[coors[1],coors[0]].tile == sDirt)) return true;
	else if (tileset[coors[1],coors[0]].tile == sCliff) {
		if ((coors[0] > 0) && (coors[0] < 60) && (coors[1] < 31)) {
			if ((tileset[coors[1],coors[0]-1].tile != sCliff) ||
				(tileset[coors[1],coors[0]+1].tile != sCliff) ||
				(tileset[coors[1]+1,coors[0]].tile != sCliff) ||
				(tileset[coors[1]+1,coors[0]+1].tile != sCliff) ||
				(tileset[coors[1]+1,coors[0]-1].tile != sCliff)) return false;
			else return true;
		}
	}
}

function checkTilePlaceableGround3x2(tileset,coors,dirt = true) {
	if ((coors[1] > 0) && (coors[0] < 60) && (coors[0] > 0)) {
		if ((checkTilePlaceableGround(tileset,[coors[0]+1,coors[1]-1],dirt)) &&
			(checkTilePlaceableGround(tileset,[coors[0]-1,coors[1]-1],dirt)) &&
			(checkTilePlaceableGround(tileset,[coors[0],coors[1]-1],dirt)) &&
			(checkTilePlaceableGround(tileset,[coors[0]+1,coors[1]],dirt)) &&
			(checkTilePlaceableGround(tileset,[coors[0]-1,coors[1]],dirt)) &&
			(checkTilePlaceableGround(tileset,[coors[0],coors[1]],dirt))) return true; else return false;
	}
}

function checkTileFree3x2(tileset,coors,spr = noone) {
	if ((coors[1] > 0) && (coors[0] < 60) && (coors[0] > 0)) {
		if (((tileset[coors[1],coors[0]].tile == noone) || (tileset[coors[1],coors[0]].tile == spr)) &&
			((tileset[coors[1],coors[0]+1].tile == noone) || (tileset[coors[1],coors[0]+1].tile == spr)) &&
			((tileset[coors[1],coors[0]-1].tile == noone) || (tileset[coors[1],coors[0]-1].tile == spr)) &&
			((tileset[coors[1]-1,coors[0]-1].tile == noone) || (tileset[coors[1]-1,coors[0]-1].tile == spr)) &&
			((tileset[coors[1]-1,coors[0]].tile == noone) || (tileset[coors[1]-1,coors[0]].tile == spr)) &&
			((tileset[coors[1]-1,coors[0]+1].tile == noone) || (tileset[coors[1]-1,coors[0]+1].tile == spr))) return true; else return false;
	}
}